--- git_perf/src/git/git_interop.rs
+++ replace walk_commits -> Result<Vec<(String, Vec<String>)>> with Ok(vec![("xyzzy".into(), vec!["xyzzy".into()])])
@@ -701,64 +701,17 @@
 
     let _ = consolidate_write_branches_into(&current_upstream_oid, &temp_ref.ref_name, None)?;
 
     Ok(temp_ref)
 }
 
 pub fn walk_commits(num_commits: usize) -> Result<Vec<(String, Vec<String>)>> {
     // update local read branch
-    let temp_ref = update_read_branch()?;
-
-    let output = capture_git_output(
-        &[
-            "--no-pager",
-            "log",
-            "--no-color",
-            "--ignore-missing",
-            "-n",
-            num_commits.to_string().as_str(),
-            "--first-parent",
-            "--pretty=--,%H,%D%n%N",
-            "--decorate=full",
-            format!("--notes={}", temp_ref.ref_name).as_str(),
-            "HEAD",
-        ],
-        &None,
-    )
-    .context("Failed to retrieve commits")?;
-
-    let mut commits: Vec<(String, Vec<String>)> = Vec::new();
-    let mut detected_shallow = false;
-    let mut current_commit: Option<String> = None;
-
-    for l in output.stdout.lines() {
-        if l.starts_with("--") {
-            let info = l.split(',').collect_vec();
-            let commit_hash = info
-                .get(1)
-                .expect("No commit header found before measurement line in git log output");
-            detected_shallow |= info[2..].contains(&"grafted");
-            current_commit = Some(commit_hash.to_string());
-            commits.push((commit_hash.to_string(), Vec::new()));
-        } else if let Some(commit_hash) = current_commit.as_ref() {
-            if let Some(last) = commits.last_mut() {
-                last.1.push(l.to_string());
-            } else {
-                // Should not happen, but just in case
-                commits.push((commit_hash.to_string(), vec![l.to_string()]));
-            }
-        }
-    }
-
-    if detected_shallow && commits.len() < num_commits {
-        bail!("Refusing to continue as commit log depth was limited by shallow clone");
-    }
-
-    Ok(commits)
+    Ok(vec![("xyzzy".into(), vec!["xyzzy".into()])]) /* ~ changed by cargo-mutants ~ */
 }
 
 pub fn pull(work_dir: Option<&Path>) -> Result<()> {
     pull_internal(work_dir)?;
     Ok(())
 }
 
 fn pull_internal(work_dir: Option<&Path>) -> Result<(), GitError> {
