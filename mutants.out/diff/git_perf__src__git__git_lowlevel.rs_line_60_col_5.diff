--- git_perf/src/git/git_lowlevel.rs
+++ replace feed_git_command -> Result<GitOutput, GitError> with Ok(Default::default())
@@ -52,50 +52,17 @@
     feed_git_command(args, working_dir, None)
 }
 
 pub(super) fn feed_git_command(
     args: &[&str],
     working_dir: &Option<&Path>,
     input: Option<&str>,
 ) -> Result<GitOutput, GitError> {
-    let stdin = input.map(|_| Stdio::piped());
-
-    let child = spawn_git_command(args, working_dir, stdin)?;
-
-    debug!("input: {}", input.unwrap_or(""));
-
-    let output = match child.stdin {
-        Some(ref stdin) => {
-            let mut writer = BufWriter::new(stdin);
-            writer.write_all(input.unwrap().as_bytes())?;
-            drop(writer);
-            child.wait_with_output()
-        }
-        None => child.wait_with_output(),
-    }?;
-
-    let stdout = String::from_utf8_lossy(&output.stdout).to_string();
-    trace!("stdout: {stdout}");
-
-    let stderr = String::from_utf8_lossy(&output.stderr).to_string();
-    trace!("stderr: {stderr}");
-
-    let git_output = GitOutput { stdout, stderr };
-
-    if output.status.success() {
-        trace!("exec succeeded");
-        Ok(git_output)
-    } else {
-        trace!("exec failed");
-        Err(GitError::ExecError {
-            command: args.join(" "),
-            output: git_output,
-        })
-    }
+    Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
 }
 
 pub(super) fn map_git_error(err: GitError) -> GitError {
     // Parsing error messasges is not a very good idea, but(!) there are no consistent + documented error code for these cases.
     // This is tested by the git compatibility check and we add an explicit LANG to the git invocation.
     match err {
         GitError::ExecError { command: _, output } if output.stderr.contains("cannot lock ref") => {
             GitError::RefFailedToLock { output }
