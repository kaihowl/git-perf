name: ci

# TODO(kaihowl) deeper test with merge-based PR workflow (HEAD == merge commit)
# TODO(kaihowl) clean up old reports / do we want commit based reports anyway?

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  pull-requests: write

on:
  push:
    branches:
      - master
      - build/*
  pull_request:
    branches:
      - master
jobs:
  test:
    name: test
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
        - stable
        - beta
        include:
        - build: stable
          os: ubuntu-22.04
          rust: stable
        - build: beta
          os: ubuntu-22.04
          rust: beta
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 40

    - name: Set Git user and email
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install libfaketime
      run: |
        if [[ $(uname -s) = Darwin ]]; then
          brew install libfaketime
        else # ubuntu
          sudo apt-get install libfaketime
        fi

    - name: Build git-perf
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run sample perf measurements
      run: |
          set -x
          cargo install --path git_perf
          # Run report on repo with known (n=10) number of measurements
          git perf measure -n 10 -m test-measure2 -k os=${{matrix.os}} -k rust=${{matrix.rust}} -- sleep 0.01
          git perf measure -n 10 -m report -k os=${{matrix.os}} -k rust=${{matrix.rust}} -- git perf report -n 1 -o report.html
          git perf add -m report-size -k os=${{matrix.os}} -k rust=${{matrix.rust}} $(wc -c < report.html)
          git perf push

          git perf audit -n 40 -m test-measure2 -s os=${{matrix.os}} -s rust=${{matrix.rust}} --min-measurements 10
          git perf audit -n 40 -m report -s os=${{matrix.os}} -s rust=${{matrix.rust}} --min-measurements 10
          git perf audit -n 40 -m report-size -s os=${{matrix.os}} -s rust=${{matrix.rust}} --min-measurements 10

    - name: Archive report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        include-hidden-files: true
        name: report-${{matrix.os}}-${{matrix.rust}}.html
        path: report.html
        if-no-files-found: error

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: cargo fmt --all --check

  clippy:
    name: clippy
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: clippy
    - name: Run clippy
      run: cargo clippy -- -D warnings

  rustdoc:
    name: rust doc
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check docs
      run: |
        export RUSTDOCFLAGS="-D warnings"
        cargo doc --no-deps

  manpage-check:
    name: manpage check
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Check documentation is up to date
      run: |
        # Check that the generated documentation files exist
        if [[ ! -f "docs/manpage.md" ]]; then
          echo "Error: Generated markdown documentation not found at docs/manpage.md"
          exit 1
        fi
        
        if [[ ! -f "man/man1/git-perf.1" ]]; then
          echo "Error: Generated manpage documentation not found at man/man1/git-perf.1"
          exit 1
        fi
        
        # Create backups of the original files for comparison
        cp docs/manpage.md /tmp/original_markdown.md
        cp -r man/man1 /tmp/original_manpages
        
        # Temporarily set version to 0.0.0 to avoid version-based diffs
        sed -i 's/^version = "[0-9]\+\.[0-9]\+\.[0-9]\+"/version = "0.0.0"/' git_perf/Cargo.toml
        cargo build
        # Restore original version
        git checkout -- git_perf/Cargo.toml
        
        # Check markdown documentation
        if ! diff -u /tmp/original_markdown.md docs/manpage.md > /tmp/markdown.diff; then
          echo "Error: Markdown documentation is out of date. A patch file has been created and will be uploaded as an artifact."
          echo ""
          echo "To fix this, run:"
          echo "   cargo build"
          echo ""
          echo "The markdown documentation is automatically generated during the build process using clap_markdown."
          exit 1
        fi
        echo "Markdown documentation is up to date ✓"
        
        # Check manpage documentation
        if ! diff -r /tmp/original_manpages man/man1 > /tmp/manpages.diff; then
          echo "Error: Manpage documentation is out of date. A patch file has been created and will be uploaded as an artifact."
          echo ""
          echo "To fix this, run:"
          echo "   cargo build"
          echo ""
          echo "The manpage documentation is automatically generated during the build process using clap_mangen."
          exit 1
        fi
        echo "Manpage documentation is up to date ✓"

    - name: Upload markdown patch artifact
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: markdown-patch
        path: /tmp/markdown.diff
        if-no-files-found: error

    - name: Upload manpage patch artifact
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: manpage-patch
        path: /tmp/manpages.diff
        if-no-files-found: error

  report:
    name: git-perf
    if: always()
    needs: [test, rustfmt, clippy, rustdoc, manpage-check]
    uses: ./.github/workflows/report.yml
    with:
      additional-args: '-s rust'
      concurrency-token: gh-pages-${{ github.ref }}
      release: 'branch'
      audit-args: '-m report -m report-size -s os="ubuntu-22.04" -s rust="stable" --min-measurements 10'
