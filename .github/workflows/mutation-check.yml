name: Mutation Score Check

on:
  pull_request:
    branches:
      - master
    paths:
      - 'git_perf/src/stats.rs'
      - 'git_perf/src/audit.rs'
      - 'git_perf/src/config.rs'

permissions:
  contents: read
  pull-requests: write

jobs:
  critical-module-mutation-check:
    name: Critical Module Mutation Check
    env:
      # Emit backtraces on panics (matching main CI)
      RUST_BACKTRACE: 1
      # Git author/committer for hermetic test environment
      GIT_AUTHOR_NAME: testuser
      GIT_AUTHOR_EMAIL: testuser@example.com
      GIT_COMMITTER_NAME: testuser
      GIT_COMMITTER_EMAIL: testuser@example.com
      # Hermetic git config
      GIT_CONFIG_NOSYSTEM: true
      GIT_CONFIG_GLOBAL: /dev/null
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 40

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install libfaketime
      run: |
        set -euo pipefail
        sudo apt-get update
        sudo apt-get install libfaketime

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-mutation-check-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-mutation-check-
          ${{ runner.os }}-cargo-

    - name: Install nextest
      run: cargo install cargo-nextest --locked

    - name: Install cargo-mutants
      run: |
        set -euo pipefail
        cargo install cargo-mutants --version 25.3.1 --force

    - name: Run mutation testing on critical modules
      run: |
        set -euo pipefail
        cd git_perf

        # Check which critical files were modified
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "(stats\.rs|audit\.rs|config\.rs)" | head -3 || true)

        if [ -z "$CHANGED_FILES" ]; then
          echo "No critical modules changed, skipping mutation testing"
          exit 0
        fi

        echo "Testing critical modules: $CHANGED_FILES"

        # Run mutation testing on specific files
        for file in $CHANGED_FILES; do
          module_name=$(basename "$file" .rs)
          echo "Testing module: $module_name"

          # Run mutation testing on specific module (nextest configured in Cargo.toml)
          cargo mutants --file "src/$file" --output "${module_name}-mutation.json" --timeout 30

          # Check mutation score against targets
          if [ -f "${module_name}-mutation.json" ]; then
            total=$(jq '.summary.total_mutants // 0' "${module_name}-mutation.json")
            caught=$(jq '.summary.caught // 0' "${module_name}-mutation.json")

            if [ "$total" -gt 0 ]; then
              score=$(echo "scale=2; $caught * 100 / $total" | bc -l)

              # Set target scores per module
              case "$module_name" in
                "stats")
                  target=90
                  ;;
                "audit")
                  target=85
                  ;;
                "config")
                  target=80
                  ;;
                *)
                  target=70
                  ;;
              esac

              echo "Module $module_name: ${score}% (target: ${target}%)"

              # Check if score meets target
              if (( $(echo "$score < $target" | bc -l) )); then
                echo "❌ Module $module_name mutation score ${score}% is below target ${target}%"
                echo "mutation_check_failed=true" >> $GITHUB_ENV
              else
                echo "✅ Module $module_name mutation score ${score}% meets target ${target}%"
              fi
            else
              echo "⚠️  No mutation results for module $module_name"
            fi
          else
            echo "❌ Failed to generate mutation report for module $module_name"
            echo "mutation_check_failed=true" >> $GITHUB_ENV
          fi
        done

    - name: Fail if mutation scores are below target
      if: env.mutation_check_failed == 'true'
      run: |
        set -euo pipefail
        echo "❌ One or more critical modules have mutation scores below target"
        echo "Please improve test coverage for the affected modules"
        exit 1

    - name: Upload critical module mutation reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: critical-module-mutation-reports-${{ github.run_number }}
        path: |
          git_perf/*-mutation.json
        retention-days: 7