name: Publish Check

on:
  pull_request:
    branches: [ master ]

jobs:
  publish-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check cargo publish (dry-run)
        run: |
          # Verify both packages can be packaged and published
          # When packages have interdependent unpublished changes, we need a multi-phase approach

          # Phase 1: Verify build.rs doesn't modify source tree
          # Capture git status before build
          git status --porcelain > /tmp/git_status_before.txt

          # Build workspace to trigger all build scripts
          cargo build --workspace --all-targets

          # Check if any source files were modified or created
          git status --porcelain > /tmp/git_status_after.txt
          if ! diff /tmp/git_status_before.txt /tmp/git_status_after.txt > /dev/null; then
            echo "Error: Build script modified or created files in source tree!"
            echo "Changes detected:"
            diff /tmp/git_status_before.txt /tmp/git_status_after.txt || true
            git status
            exit 1
          fi
          echo "âœ“ Build scripts did not modify source tree"

          # Phase 2: Package verification
          # Package cli_types with full verification (no workspace dependencies)
          cargo package --package git_perf_cli_types --allow-dirty

          # Package git-perf with --no-verify since it depends on unpublished cli_types changes
          # The verification would fail trying to build against the published cli_types version
          # We've already verified the build works and doesn't modify sources in Phase 1
          cargo package --package git-perf --allow-dirty --no-verify

          # Phase 3: Dry-run publish to verify crates.io metadata
          cargo publish --dry-run --package git_perf_cli_types --allow-dirty
          cargo publish --dry-run --package git-perf --allow-dirty --no-verify
