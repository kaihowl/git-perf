name: 'git-perf report'
on:
  workflow_call:
    inputs:
      release:
        description: 'release to install (`latest` or `branch`)'
        required: false
        type: string
        default: 'latest'
      concurrency-token:
        description: 'token to prevent concurrent updates of github pages'
        required: false
        type: string
        default: 'gh-pages-concurrency'
      depth:
        description: 'depth of the report in number of commits'
        required: false
        type: number
        default: 40
      additional-args:
        description: 'additional arguments to git-perf report invocation'
        required: false
        type: string
        default: ''
      audit-args:
        description: 'additional arguments to git-perf audit invocation'
        required: false
        type: string
        default: ''


permissions:
  pages: write
  contents: write
  pull-requests: write

concurrency:
  group: ${{ inputs.concurrency-token }}

jobs:
  report:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: ${{ inputs.depth }}
      - id: install-action
        if: ${{ inputs.release == 'branch' }}
        name: install git-perf
        uses: ./.github/actions/install
        with:
          release: ${{ inputs.release }}
      - id: install-action-from-release
        if: ${{ inputs.release != 'branch' }}
        name: install git-perf
        # TODO(kaihowl) move to `latest` once actions are published
        uses: kaihowl/git-perf/.github/actions/install@master
        with:
          release: latest
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5
      - name: use commit name as report name
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "REPORT_NAME=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: use branch name as report name
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "REPORT_NAME=${GITHUB_REF_SLUG}" >> $GITHUB_ENV
      - name: report
        shell: bash
        run: |
          # Add error handling for git perf pull
          if ! git perf pull; then
            echo "Warning: git perf pull failed, but continuing with report generation"
            echo "This may be due to missing git objects in the repository"
          fi
          mkdir reports/
          git perf report -n ${{ inputs.depth }} -o reports/${{env.REPORT_NAME}}.html ${{ inputs.additional-args }}
      - name: audit
        shell: bash
        if: ${{ inputs.audit-args != '' }}
        run: |
          {
            echo 'AUDIT_OUTPUT<<EOF'
            git perf audit -n ${{ inputs.depth }} ${{ inputs.audit-args }} || echo "Audit failed, but continuing..."
            echo EOF
          } >> "$GITHUB_ENV"
      - name: Publish new perf reports
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          keep_files: true
      - uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { REPORT_NAME } = process.env
            const pages = await github.rest.repos.getPages({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            
            const auditOutput = process.env.AUDIT_OUTPUT || ''
            const auditSection = auditOutput ? `\n\n## Audit Results\n\n\`\`\`\n${auditOutput}\n\`\`\`` : ''
            const commentBody = `⏱  [Performance Results](${pages.data.html_url}/${REPORT_NAME}.html)${auditSection}`
            
            // Find existing performance comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('⏱  [Performance Results]')
            )

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              })
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              })
            }
      - name: Cleanup reports without measurements
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          # Run cleanup script
          chmod +x ./scripts/cleanup-reports.sh
          ./scripts/cleanup-reports.sh

          # Check if there are changes to push
          git fetch origin gh-pages
          git checkout gh-pages

          if [ -n "$(git status --porcelain)" ]; then
            git push origin gh-pages
            echo "Pushed cleanup changes to gh-pages"
          else
            echo "No orphaned reports to clean up"
          fi

