name: 'Publish git-perf Report'
description: 'Generate and publish git-perf performance reports to GitHub Pages'
author: 'Kai Höwelmeyer'

branding:
  icon: 'bar-chart-2'
  color: 'blue'

inputs:
  depth:
    description: 'Depth of the report in number of commits'
    required: false
    default: '40'
  report-name:
    description: 'Name of the report file (without .html extension). If empty, uses branch name or commit SHA'
    required: false
    default: ''
  additional-args:
    description: 'Additional arguments to git-perf report invocation'
    required: false
    default: ''
  audit-args:
    description: 'Additional arguments to git-perf audit invocation'
    required: false
    default: ''
  git-perf-version:
    description: 'Version of git-perf to use (latest, or specific version)'
    required: false
    default: 'latest'
  github-token:
    description: 'GitHub token for publishing to gh-pages'
    required: true
  comment-on-pr:
    description: 'Whether to comment on the PR with the report URL (only applies to pull_request events)'
    required: false
    default: 'true'
  show-size:
    description: 'Whether to show measurement storage size in output'
    required: false
    default: 'false'
  size-use-disk-size:
    description: 'Whether to use disk-size (compressed) instead of logical size'
    required: false
    default: 'true'

outputs:
  report-url:
    description: 'URL of the published report'
    value: ${{ steps.get-pages-url.outputs.pages-url }}/${{ steps.set-report-name.outputs.report-name }}.html
  audit-output:
    description: 'Output from git-perf audit command'
    value: ${{ steps.audit.outputs.audit-output }}
  size-output:
    description: 'Output from git-perf size command'
    value: ${{ steps.size.outputs.size-output }}

runs:
  using: composite
  steps:
    - name: Install git-perf
      uses: kaihowl/git-perf/.github/actions/install@master
      with:
        release: ${{ inputs.git-perf-version }}

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v5

    - name: Set report name
      id: set-report-name
      shell: bash
      run: |
        if [ -n "${{ inputs.report-name }}" ]; then
          REPORT_NAME="${{ inputs.report-name }}"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          REPORT_NAME="$(git rev-parse HEAD)"
        else
          REPORT_NAME="${GITHUB_REF_SLUG}"
        fi
        echo "report-name=$REPORT_NAME" >> $GITHUB_OUTPUT
        echo "Using report name: $REPORT_NAME"

    - name: Generate report
      shell: bash
      run: |
        # Add error handling for git perf pull
        if ! git perf pull; then
          echo "Warning: git perf pull failed, but continuing with report generation"
          echo "This may be due to missing git objects in the repository"
        fi
        mkdir -p reports/
        git perf report -n ${{ inputs.depth }} -o reports/${{ steps.set-report-name.outputs.report-name }}.html ${{ inputs.additional-args }}

    - name: Run audit
      id: audit
      shell: bash
      if: ${{ inputs.audit-args != '' }}
      run: |
        {
          echo 'audit-output<<EOF'
          git perf audit -n ${{ inputs.depth }} ${{ inputs.audit-args }} 2>&1 || echo "Audit failed, but continuing..."
          echo EOF
        } >> "$GITHUB_OUTPUT"

    - name: Show measurement storage size
      id: size
      shell: bash
      if: ${{ inputs.show-size == 'true' }}
      run: |
        # Determine size flags based on inputs
        SIZE_FLAGS=""
        if [ "${{ inputs.size-use-disk-size }}" = "true" ]; then
          SIZE_FLAGS="--disk-size"
          echo "=== Measurement Storage Size (On-Disk) ==="
        else
          echo "=== Measurement Storage Size (Logical) ==="
        fi

        {
          echo 'size-output<<EOF'
          git perf size $SIZE_FLAGS --include-objects 2>&1 || echo "Size command failed, but continuing..."
          echo EOF
        } >> "$GITHUB_OUTPUT"

        # Also display to workflow log
        git perf size $SIZE_FLAGS --include-objects || true

        echo ""
        if [ "${{ inputs.size-use-disk-size }}" = "true" ]; then
          echo "=== Detailed Breakdown (On-Disk) ==="
        else
          echo "=== Detailed Breakdown (Logical) ==="
        fi
        git perf size $SIZE_FLAGS --detailed || true

    - name: Publish to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ inputs.github-token }}
        publish_dir: ./reports
        keep_files: true

    - name: Get Pages URL
      id: get-pages-url
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        pages_url=$(gh api repos/${{ github.repository }}/pages --jq '.html_url')
        echo "pages-url=$pages_url" >> $GITHUB_OUTPUT
        echo "Pages URL: $pages_url"

    - name: Comment on PR
      if: ${{ github.event_name == 'pull_request' && inputs.comment-on-pr == 'true' }}
      uses: actions/github-script@v8
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const reportName = '${{ steps.set-report-name.outputs.report-name }}'
          const pagesUrl = '${{ steps.get-pages-url.outputs.pages-url }}'
          const reportUrl = `${pagesUrl}/${reportName}.html`

          const auditOutput = `${{ steps.audit.outputs.audit-output }}`.trim()
          const auditSection = auditOutput ? `\n\n## Audit Results\n\n\`\`\`\n${auditOutput}\n\`\`\`` : ''

          const sizeOutput = `${{ steps.size.outputs.size-output }}`.trim()
          const sizeSection = sizeOutput ? `\n\n## Measurement Storage Size\n\n\`\`\`\n${sizeOutput}\n\`\`\`` : ''

          const commentBody = `⏱  [Performance Results](${reportUrl})${auditSection}${sizeSection}`

          // Find existing performance comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })

          const existingComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('⏱  [Performance Results]')
          )

          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            })
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })
          }
