# Cursor Instructions for Rust Project

## Code Formatting
- Always run `rustfmt` before creating any submissions or commits
- Ensure all Rust code follows standard formatting conventions
- Use `cargo fmt` to format the entire workspace

## Testing
- Run tests with `cargo test -- --skip slow` to exclude slow tests
- Ensure all tests pass before submitting code
- Use `cargo test` for full test suite when needed

## Code Quality
- Follow Rust best practices and idiomatic code patterns
- Use `cargo clippy` for additional linting and suggestions
- Ensure proper error handling with Result and Option types
- Use meaningful variable and function names

## Project Structure
- This is a Rust workspace with multiple crates (cli_types, git_perf)
- Follow workspace conventions for shared dependencies
- Maintain proper module organization

## Pull Requests
- Pull Request titles must follow the Conventional Commits specification (e.g., `feat:`, `fix:`, `docs:`, `refactor:`, `chore:`, `test:`, `perf:`, `build:`, `ci:`, `revert:`). Use scope when helpful (e.g., `feat(cli_types): ...`).

## Generated Documentation
- If changes are made to the `cli_types` crate, ensure that any documentation regenerated as part of the build process is included in the commit (commit the regenerated docs alongside the code changes).

## Pre-submission Checklist
1. Run `cargo fmt` to format code
2. Run `cargo test -- --skip slow` to verify tests pass
3. Run `cargo clippy` for additional code quality checks
4. Ensure all changes compile without warnings
5. If `cli_types` changed, commit regenerated documentation produced by the build.

## Commands to Run Before Submissions
```bash
# Format code
cargo fmt

# Run tests (excluding slow ones)
cargo test -- --skip slow

# Optional: Run clippy for additional checks
cargo clippy
```